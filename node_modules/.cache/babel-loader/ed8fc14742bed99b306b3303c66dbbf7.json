{"ast":null,"code":"import{swap,insertStep}from'./helpers';var quickSort=function quickSort(array,position,arraySteps,colorSteps){if(array.length<2){insertStep(array,position,arraySteps);var _colorKey=colorSteps[colorSteps.length-1].slice();_colorKey[position]=2;colorSteps.push(_colorKey);return;}// pick median of three numbers as pivot and sent it to back\nswap(array,pickPivot(array),array.length-1);insertStep(array,position,arraySteps);colorSteps.push(colorSteps[colorSteps.length-1].slice());var pivot=array[array.length-1];var A=0;var B=array.length-1;// swap small value from right with big value from left\nwhile(A<B){while(array[A]<pivot){insertStep(array,position,arraySteps);var _colorKey2=colorSteps[colorSteps.length-1].slice();_colorKey2=_colorKey2.map(function(key){return key===2?2:0;});_colorKey2[position+A]=1;_colorKey2[position+B]=1;colorSteps.push(_colorKey2);A++;}while(array[B]>=pivot){insertStep(array,position,arraySteps);var _colorKey3=colorSteps[colorSteps.length-1].slice();_colorKey3=_colorKey3.map(function(key){return key===2?2:0;});_colorKey3[position+A]=1;_colorKey3[position+B]=1;colorSteps.push(_colorKey3);B--;}if(A<B){swap(array,A,B);insertStep(array,position,arraySteps);var _colorKey4=colorSteps[colorSteps.length-1].slice();_colorKey4=_colorKey4.map(function(key){return key===2?2:0;});_colorKey4[position+A]=1;_colorKey4[position+B]=1;colorSteps.push(_colorKey4);}}// swap big value with pivot\nvar bigIndex=Math.max(A,B);swap(array,bigIndex,array.length-1);insertStep(array,position,arraySteps);var colorKey=colorSteps[colorSteps.length-1].slice();colorKey[position+bigIndex]=2;colorSteps.push(colorKey);// recurse on two halves\nquickSort(array.slice(0,A),position,arraySteps,colorSteps);quickSort(array.slice(A+1),position+A+1,arraySteps,colorSteps);return;};function pickPivot(array){var A=array[0];var B=array[Math.floor(array.length/2)];var C=array[array.length-1];var middleValue=[A,B,C].sort()[1];var middleIndex=array.indexOf(middleValue);return middleIndex;}export default quickSort;","map":{"version":3,"sources":["/home/amol_telang/Documents/algoVisuvalizer/algoVisuvalizer/app/src/algorithms/QuickSort.js"],"names":["swap","insertStep","quickSort","array","position","arraySteps","colorSteps","length","colorKey","slice","push","pickPivot","pivot","A","B","map","key","bigIndex","Math","max","floor","C","middleValue","sort","middleIndex","indexOf"],"mappings":"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","sourcesContent":["import { swap, insertStep } from './helpers';\n\nconst quickSort = (array, position, arraySteps, colorSteps) => {\n  if (array.length < 2) {\n    insertStep(array, position, arraySteps);\n\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\n    colorKey[position] = 2;\n    colorSteps.push(colorKey);\n    return;\n  }\n\n  // pick median of three numbers as pivot and sent it to back\n  swap(array, pickPivot(array), array.length - 1);\n  insertStep(array, position, arraySteps);\n  colorSteps.push(colorSteps[colorSteps.length - 1].slice());\n\n  let pivot = array[array.length - 1];\n  let A = 0;\n  let B = array.length - 1;\n\n  // swap small value from right with big value from left\n  while (A < B) {\n    while (array[A] < pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      A++;\n    }\n    while (array[B] >= pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      B--;\n    }\n    if (A < B) {\n      swap(array, A, B);\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n    }\n  }\n\n  // swap big value with pivot\n  let bigIndex = Math.max(A, B);\n\n  swap(array, bigIndex, array.length - 1);\n  insertStep(array, position, arraySteps);\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n  colorKey[position + bigIndex] = 2;\n  colorSteps.push(colorKey);\n\n  // recurse on two halves\n  quickSort(array.slice(0, A), position, arraySteps, colorSteps);\n  quickSort(array.slice(A + 1), position + A + 1, arraySteps, colorSteps);\n\n  return;\n}\n\nfunction pickPivot(array) {\n  let A = array[0];\n  let B = array[Math.floor(array.length / 2)];\n  let C = array[array.length - 1];\n\n  let middleValue = [A, B, C].sort()[1];\n  let middleIndex = array.indexOf(middleValue);\n\n  return middleIndex;\n}\n\nexport default quickSort;"]},"metadata":{},"sourceType":"module"}