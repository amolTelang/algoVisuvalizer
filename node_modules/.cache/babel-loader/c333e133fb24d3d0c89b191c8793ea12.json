{"ast":null,"code":"var insertionSort=function insertionSort(array,position,arraySteps,colorSteps){var colorKey=colorSteps[colorSteps.length-1].slice();var i,j,key;for(i=1;i<array.length;i++){key=array[i];j=i-1;while(j>=0&&array[j]>key){array[j+1]=array[j];arraySteps.push(array.slice());colorKey[i]=2;if(i===j+1){colorKey[j+1]=2;}else{colorKey[j+1]=1;}colorKey[j]=1;colorSteps.push(colorKey.slice());colorKey[j+1]=0;colorKey[i]=0;colorKey[j]=0;j=j-1;}array[j+1]=key;arraySteps.push(array.slice());colorSteps.push(colorKey.slice());}colorSteps[colorSteps.length-1]=new Array(array.length).fill(2);};export default insertionSort;","map":{"version":3,"sources":["/home/amol_telang/Documents/algoVisuvalizer/algoVisuvalizer/app/src/algorithms/InsertionSort.js"],"names":["insertionSort","array","position","arraySteps","colorSteps","colorKey","length","slice","i","j","key","push","Array","fill"],"mappings":"AAAA,GAAMA,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAQC,QAAR,CAAkBC,UAAlB,CAA8BC,UAA9B,CAA6C,CAClE,GAAIC,CAAAA,QAAQ,CAAGD,UAAU,CAACA,UAAU,CAACE,MAAX,CAAoB,CAArB,CAAV,CAAkCC,KAAlC,EAAf,CAEA,GAAIC,CAAAA,CAAJ,CAAOC,CAAP,CAAUC,GAAV,CACA,IAAKF,CAAC,CAAG,CAAT,CAAYA,CAAC,CAAGP,KAAK,CAACK,MAAtB,CAA8BE,CAAC,EAA/B,CAAmC,CAClCE,GAAG,CAAGT,KAAK,CAACO,CAAD,CAAX,CACAC,CAAC,CAAGD,CAAC,CAAG,CAAR,CAEA,MAAOC,CAAC,EAAI,CAAL,EAAUR,KAAK,CAACQ,CAAD,CAAL,CAAWC,GAA5B,CAAiC,CAChCT,KAAK,CAACQ,CAAC,CAAG,CAAL,CAAL,CAAeR,KAAK,CAACQ,CAAD,CAApB,CACAN,UAAU,CAACQ,IAAX,CAAgBV,KAAK,CAACM,KAAN,EAAhB,EACAF,QAAQ,CAACG,CAAD,CAAR,CAAc,CAAd,CACS,GAAKA,CAAC,GAAKC,CAAC,CAAG,CAAf,CAAkB,CACdJ,QAAQ,CAACI,CAAC,CAAG,CAAL,CAAR,CAAkB,CAAlB,CACH,CAFD,IAEM,CACFJ,QAAQ,CAACI,CAAC,CAAG,CAAL,CAAR,CAAkB,CAAlB,CACH,CACVJ,QAAQ,CAACI,CAAD,CAAR,CAAc,CAAd,CACAL,UAAU,CAACO,IAAX,CAAgBN,QAAQ,CAACE,KAAT,EAAhB,EACSF,QAAQ,CAACI,CAAC,CAAG,CAAL,CAAR,CAAkB,CAAlB,CACAJ,QAAQ,CAACG,CAAD,CAAR,CAAc,CAAd,CACTH,QAAQ,CAACI,CAAD,CAAR,CAAc,CAAd,CACAA,CAAC,CAAGA,CAAC,CAAG,CAAR,CACA,CACDR,KAAK,CAACQ,CAAC,CAAG,CAAL,CAAL,CAAeC,GAAf,CACAP,UAAU,CAACQ,IAAX,CAAgBV,KAAK,CAACM,KAAN,EAAhB,EACAH,UAAU,CAACO,IAAX,CAAgBN,QAAQ,CAACE,KAAT,EAAhB,EACA,CACDH,UAAU,CAACA,UAAU,CAACE,MAAX,CAAoB,CAArB,CAAV,CAAoC,GAAIM,CAAAA,KAAJ,CAAUX,KAAK,CAACK,MAAhB,EAAwBO,IAAxB,CAA6B,CAA7B,CAApC,CACA,CA7BD,CA+BA,cAAeb,CAAAA,aAAf","sourcesContent":["const insertionSort = (array, position, arraySteps, colorSteps) => {\n\tlet colorKey = colorSteps[colorSteps.length - 1].slice();\n\n\tlet i, j, key;\n\tfor (i = 1; i < array.length; i++) {\n\t\tkey = array[i];\n\t\tj = i - 1;\n\n\t\twhile (j >= 0 && array[j] > key) {\n\t\t\tarray[j + 1] = array[j];\n\t\t\tarraySteps.push(array.slice());\n\t\t\tcolorKey[i] = 2;\n            if ( i === j + 1 ){\n                colorKey[j + 1] = 2;\n            } else{\n                colorKey[j + 1] = 1;\n            }\n\t\t\tcolorKey[j] = 1;\n\t\t\tcolorSteps.push(colorKey.slice());\n            colorKey[j + 1] = 0;\n            colorKey[i] = 0;\n\t\t\tcolorKey[j] = 0;\n\t\t\tj = j - 1;\n\t\t}\n\t\tarray[j + 1] = key;\n\t\tarraySteps.push(array.slice());\n\t\tcolorSteps.push(colorKey.slice());\n\t}\n\tcolorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\n};\n\nexport default insertionSort"]},"metadata":{},"sourceType":"module"}