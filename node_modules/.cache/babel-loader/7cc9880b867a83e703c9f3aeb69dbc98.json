{"ast":null,"code":"import { swap } from './helpers';\n\nconst bs = (array, position, arraySteps, colorSteps) => {\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        array = swap(array, j, j + 1);\n      }\n\n      arraySteps.push(array.slice());\n      colorKey[j] = 1;\n      colorKey[j + 1] = 1;\n      colorSteps.push(colorKey.slice());\n      colorKey[j] = 0;\n      colorKey[j + 1] = 0;\n    }\n\n    colorKey[arraySteps.length - 1 - i] = 2;\n    arraySteps.push(array.slice());\n    colorSteps.push(colorKey.slice());\n  }\n\n  colorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\n  return;\n};\n\nexport default bs;","map":{"version":3,"sources":["/home/amol_telang/Documents/algoVisuvalizer/algoVisuvalizer/app/src/algorithms/BS.js"],"names":["swap","bs","array","position","arraySteps","colorSteps","colorKey","length","slice","i","j","push","Array","fill"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,WAAnB;;AAEA,MAAMC,EAAE,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,UAAlB,EAA8BC,UAA9B,KAA6C;AACvD,MAAIC,QAAQ,GAAGD,UAAU,CAACA,UAAU,CAACE,MAAX,GAAoB,CAArB,CAAV,CAAkCC,KAAlC,EAAf;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACK,MAAN,GAAe,CAAnC,EAAsCE,CAAC,EAAvC,EAA2C;AAC1C,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACK,MAAN,GAAeE,CAAf,GAAmB,CAAvC,EAA0CC,CAAC,EAA3C,EAA+C;AACrC,UAAIR,KAAK,CAACQ,CAAD,CAAL,GAAWR,KAAK,CAACQ,CAAC,GAAG,CAAL,CAApB,EAA6B;AACzBR,QAAAA,KAAK,GAAGF,IAAI,CAACE,KAAD,EAAQQ,CAAR,EAAWA,CAAC,GAAG,CAAf,CAAZ;AACH;;AACDN,MAAAA,UAAU,CAACO,IAAX,CAAgBT,KAAK,CAACM,KAAN,EAAhB;AACAF,MAAAA,QAAQ,CAACI,CAAD,CAAR,GAAc,CAAd;AACAJ,MAAAA,QAAQ,CAACI,CAAC,GAAG,CAAL,CAAR,GAAkB,CAAlB;AACAL,MAAAA,UAAU,CAACM,IAAX,CAAgBL,QAAQ,CAACE,KAAT,EAAhB;AACAF,MAAAA,QAAQ,CAACI,CAAD,CAAR,GAAc,CAAd;AACAJ,MAAAA,QAAQ,CAACI,CAAC,GAAG,CAAL,CAAR,GAAkB,CAAlB;AACH;;AACDJ,IAAAA,QAAQ,CAACF,UAAU,CAACG,MAAX,GAAoB,CAApB,GAAwBE,CAAzB,CAAR,GAAsC,CAAtC;AACAL,IAAAA,UAAU,CAACO,IAAX,CAAgBT,KAAK,CAACM,KAAN,EAAhB;AACAH,IAAAA,UAAU,CAACM,IAAX,CAAgBL,QAAQ,CAACE,KAAT,EAAhB;AACN;;AACEH,EAAAA,UAAU,CAACA,UAAU,CAACE,MAAX,GAAoB,CAArB,CAAV,GAAoC,IAAIK,KAAJ,CAAUV,KAAK,CAACK,MAAhB,EAAwBM,IAAxB,CAA6B,CAA7B,CAApC;AACA;AACH,CArBD;;AAuBA,eAAeZ,EAAf","sourcesContent":["import {swap} from './helpers';\n\nconst bs = (array, position, arraySteps, colorSteps) => {\n\tlet colorKey = colorSteps[colorSteps.length - 1].slice();\n\n\tfor (let i = 0; i < array.length - 1; i++) {\n\t\tfor (let j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                array = swap(array, j, j + 1);\n            }\n            arraySteps.push(array.slice());\n            colorKey[j] = 1;\n            colorKey[j + 1] = 1;\n            colorSteps.push(colorKey.slice());\n            colorKey[j] = 0;\n            colorKey[j + 1] = 0;\n        }\n        colorKey[arraySteps.length - 1 - i] = 2;\n        arraySteps.push(array.slice());\n        colorSteps.push(colorKey.slice());\n\t}\n    colorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\n    return;\n};\n\nexport default bs;"]},"metadata":{},"sourceType":"module"}