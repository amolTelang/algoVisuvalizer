{"ast":null,"code":"import { swap, insertStep } from './helpers';\n\nconst quickSort = (array, position, arraySteps, colorSteps) => {\n  if (array.length < 2) {\n    insertStep(array, position, arraySteps);\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\n    colorKey[position] = 2;\n    colorSteps.push(colorKey);\n    return;\n  } // pick median of three numbers as pivot and sent it to back\n\n\n  swap(array, pickPivot(array), array.length - 1);\n  insertStep(array, position, arraySteps);\n  colorSteps.push(colorSteps[colorSteps.length - 1].slice());\n  let pivot = array[array.length - 1];\n  let A = 0;\n  let B = array.length - 1; // swap small value from right with big value from left\n\n  while (A < B) {\n    while (array[A] < pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      A++;\n    }\n\n    while (array[B] >= pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      B--;\n    }\n\n    if (A < B) {\n      swap(array, A, B);\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n    }\n  } // swap big value with pivot\n\n\n  let bigIndex = Math.max(A, B);\n  swap(array, bigIndex, array.length - 1);\n  insertStep(array, position, arraySteps);\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n  colorKey[position + bigIndex] = 2;\n  colorSteps.push(colorKey); // recurse on two halves\n\n  quickSort(array.slice(0, A), position, arraySteps, colorSteps);\n  quickSort(array.slice(A + 1), position + A + 1, arraySteps, colorSteps);\n  return;\n};\n\nfunction pickPivot(array) {\n  let A = array[0];\n  let B = array[Math.floor(array.length / 2)];\n  let C = array[array.length - 1];\n  let middleValue = [A, B, C].sort()[1];\n  let middleIndex = array.indexOf(middleValue);\n  return middleIndex;\n}\n\nexport default quickSort;","map":{"version":3,"sources":["/home/amol_telang/Documents/algoVisuvalizer/algoVisuvalizer/app/src/algorithms/QuickSort.js"],"names":["swap","insertStep","quickSort","array","position","arraySteps","colorSteps","length","colorKey","slice","push","pickPivot","pivot","A","B","map","key","bigIndex","Math","max","floor","C","middleValue","sort","middleIndex","indexOf"],"mappings":"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","sourcesContent":["import { swap, insertStep } from './helpers';\n\nconst quickSort = (array, position, arraySteps, colorSteps) => {\n  if (array.length < 2) {\n    insertStep(array, position, arraySteps);\n\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\n    colorKey[position] = 2;\n    colorSteps.push(colorKey);\n    return;\n  }\n\n  // pick median of three numbers as pivot and sent it to back\n  swap(array, pickPivot(array), array.length - 1);\n  insertStep(array, position, arraySteps);\n  colorSteps.push(colorSteps[colorSteps.length - 1].slice());\n\n  let pivot = array[array.length - 1];\n  let A = 0;\n  let B = array.length - 1;\n\n  // swap small value from right with big value from left\n  while (A < B) {\n    while (array[A] < pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      A++;\n    }\n    while (array[B] >= pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      B--;\n    }\n    if (A < B) {\n      swap(array, A, B);\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n    }\n  }\n\n  // swap big value with pivot\n  let bigIndex = Math.max(A, B);\n\n  swap(array, bigIndex, array.length - 1);\n  insertStep(array, position, arraySteps);\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n  colorKey[position + bigIndex] = 2;\n  colorSteps.push(colorKey);\n\n  // recurse on two halves\n  quickSort(array.slice(0, A), position, arraySteps, colorSteps);\n  quickSort(array.slice(A + 1), position + A + 1, arraySteps, colorSteps);\n\n  return;\n}\n\nfunction pickPivot(array) {\n  let A = array[0];\n  let B = array[Math.floor(array.length / 2)];\n  let C = array[array.length - 1];\n\n  let middleValue = [A, B, C].sort()[1];\n  let middleIndex = array.indexOf(middleValue);\n\n  return middleIndex;\n}\n\nexport default quickSort;"]},"metadata":{},"sourceType":"module"}