{"ast":null,"code":"import{swap}from'./helpers';var bs=function bs(array,position,arraySteps,colorSteps){var colorKey=colorSteps[colorSteps.length-1].slice();for(var i=0;i<array.length-1;i++){for(var j=0;j<array.length-i-1;j++){if(array[j]>array[j+1]){array=swap(array,j,j+1);}arraySteps.push(array.slice());colorKey[j]=1;colorKey[j+1]=1;colorSteps.push(colorKey.slice());colorKey[j]=0;colorKey[j+1]=0;}colorKey[arraySteps.length-1-i]=2;arraySteps.push(array.slice());colorSteps.push(colorKey.slice());}colorSteps[colorSteps.length-1]=new Array(array.length).fill(2);return;};export default bs;","map":{"version":3,"sources":["/home/amol_telang/Documents/algoVisuvalizer/algoVisuvalizer/app/src/algorithms/BS.js"],"names":["swap","bs","array","position","arraySteps","colorSteps","colorKey","length","slice","i","j","push","Array","fill"],"mappings":"AAAA,OAAQA,IAAR,KAAmB,WAAnB,CAEA,GAAMC,CAAAA,EAAE,CAAG,QAALA,CAAAA,EAAK,CAACC,KAAD,CAAQC,QAAR,CAAkBC,UAAlB,CAA8BC,UAA9B,CAA6C,CACvD,GAAIC,CAAAA,QAAQ,CAAGD,UAAU,CAACA,UAAU,CAACE,MAAX,CAAoB,CAArB,CAAV,CAAkCC,KAAlC,EAAf,CAEA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGP,KAAK,CAACK,MAAN,CAAe,CAAnC,CAAsCE,CAAC,EAAvC,CAA2C,CAC1C,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGR,KAAK,CAACK,MAAN,CAAeE,CAAf,CAAmB,CAAvC,CAA0CC,CAAC,EAA3C,CAA+C,CACrC,GAAIR,KAAK,CAACQ,CAAD,CAAL,CAAWR,KAAK,CAACQ,CAAC,CAAG,CAAL,CAApB,CAA6B,CACzBR,KAAK,CAAGF,IAAI,CAACE,KAAD,CAAQQ,CAAR,CAAWA,CAAC,CAAG,CAAf,CAAZ,CACH,CACDN,UAAU,CAACO,IAAX,CAAgBT,KAAK,CAACM,KAAN,EAAhB,EACAF,QAAQ,CAACI,CAAD,CAAR,CAAc,CAAd,CACAJ,QAAQ,CAACI,CAAC,CAAG,CAAL,CAAR,CAAkB,CAAlB,CACAL,UAAU,CAACM,IAAX,CAAgBL,QAAQ,CAACE,KAAT,EAAhB,EACAF,QAAQ,CAACI,CAAD,CAAR,CAAc,CAAd,CACAJ,QAAQ,CAACI,CAAC,CAAG,CAAL,CAAR,CAAkB,CAAlB,CACH,CACDJ,QAAQ,CAACF,UAAU,CAACG,MAAX,CAAoB,CAApB,CAAwBE,CAAzB,CAAR,CAAsC,CAAtC,CACAL,UAAU,CAACO,IAAX,CAAgBT,KAAK,CAACM,KAAN,EAAhB,EACAH,UAAU,CAACM,IAAX,CAAgBL,QAAQ,CAACE,KAAT,EAAhB,EACN,CACEH,UAAU,CAACA,UAAU,CAACE,MAAX,CAAoB,CAArB,CAAV,CAAoC,GAAIK,CAAAA,KAAJ,CAAUV,KAAK,CAACK,MAAhB,EAAwBM,IAAxB,CAA6B,CAA7B,CAApC,CACA,OACH,CArBD,CAuBA,cAAeZ,CAAAA,EAAf","sourcesContent":["import {swap} from './helpers';\n\nconst bs = (array, position, arraySteps, colorSteps) => {\n\tlet colorKey = colorSteps[colorSteps.length - 1].slice();\n\n\tfor (let i = 0; i < array.length - 1; i++) {\n\t\tfor (let j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                array = swap(array, j, j + 1);\n            }\n            arraySteps.push(array.slice());\n            colorKey[j] = 1;\n            colorKey[j + 1] = 1;\n            colorSteps.push(colorKey.slice());\n            colorKey[j] = 0;\n            colorKey[j + 1] = 0;\n        }\n        colorKey[arraySteps.length - 1 - i] = 2;\n        arraySteps.push(array.slice());\n        colorSteps.push(colorKey.slice());\n\t}\n    colorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\n    return;\n};\n\nexport default bs;"]},"metadata":{},"sourceType":"module"}